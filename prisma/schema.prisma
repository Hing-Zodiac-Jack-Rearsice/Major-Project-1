// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?         @unique
  password              String?
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  role                  String?         @default("user")
  // Optional for WebAuthn support
  Authenticator         Authenticator[]
  // Stripe priceID 
  priceID               String?
  // CustomerID for stripe
  customerID            String?
  // for stripe connect 
  connectedAccountId    String?         @unique
  stripeConnectedLinked Boolean         @default(false)
  events                Event[]
  tickets               Ticket[]
  attendances           Attendance[]
  sales                 Sale[]
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  resetToken            String?         @unique
  resetTokenExpiry      DateTime?
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

// a new database table to store email templates and themes for each event.

model Event {
  id             String       @id @default(cuid()) @map("_id")
  eventName      String
  userEmail      String
  categoryName   String       @default("")
  ticketAmount   Int          @default(100)
  ticketPrice    Int
  location       String
  startDate      DateTime
  endDate        DateTime
  description    String
  imageUrl       String?
  // user datatype referencing User model above by connecting userEmail from [Event] to email from [User]
  user           User?        @relation(fields: [userEmail], references: [email])
  tickets        Ticket[]
  attendances    Attendance[]
  sales          Sale[]
  category       Category?    @relation(fields: [categoryName], references: [category])
  status         String       @default("pending")
  // qrcode color
  // qrCodeColor String? @default("#000000")
  qrCodeTheme    String?      @default("classic")
  // Optional event details if event organizers want to add
  featuredGuests Json?
  highlights     Json?
  sponsors       Json?
}

model Category {
  id       String  @id @default(cuid()) @map("_id")
  category String  @unique
  events   Event[]
}

model Ticket {
  id        String  @id @default(cuid()) @map("_id")
  eventId   String
  eventName String
  userEmail String
  // url stored in firebase 
  qrCodeUrl String?
  // references the user Email which purchased the ticket
  user      User?   @relation(fields: [userEmail], references: [email])
  // references the event id 
  event     Event   @relation(fields: [eventId], references: [id])
}

model Attendance {
  id        String  @id @default(cuid()) @map("_id")
  eventId   String
  eventName String
  userEmail String
  userName  String?
  status    String  @default("absent")
  user      User?   @relation(fields: [userEmail], references: [email])
  event     Event   @relation(fields: [eventId], references: [id])
}

// working on here 
model Sale {
  id        String @id @default(cuid()) @map("_id")
  eventId   String
  price     Int
  userEmail String
  userName  String
  user      User?  @relation(fields: [userEmail], references: [email])
  event     Event  @relation(fields: [eventId], references: [id])
}

model Notification {
  id        String   @id @default(cuid()) @map("_id")
  userEmail String
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}
